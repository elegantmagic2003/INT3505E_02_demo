from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.book import Book
from openapi_server import util

from openapi_server.models.book import Book  # noqa: E501

class BooksGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, page=None, total_pages=None, total_items=None, has_next=None, has_prev=None, items=None):  # noqa: E501
        """BooksGet200Response - a model defined in OpenAPI

        :param page: The page of this BooksGet200Response.  # noqa: E501
        :type page: int
        :param total_pages: The total_pages of this BooksGet200Response.  # noqa: E501
        :type total_pages: int
        :param total_items: The total_items of this BooksGet200Response.  # noqa: E501
        :type total_items: int
        :param has_next: The has_next of this BooksGet200Response.  # noqa: E501
        :type has_next: bool
        :param has_prev: The has_prev of this BooksGet200Response.  # noqa: E501
        :type has_prev: bool
        :param items: The items of this BooksGet200Response.  # noqa: E501
        :type items: List[Book]
        """
        self.openapi_types = {
            'page': int,
            'total_pages': int,
            'total_items': int,
            'has_next': bool,
            'has_prev': bool,
            'items': List[Book]
        }

        self.attribute_map = {
            'page': 'page',
            'total_pages': 'total_pages',
            'total_items': 'total_items',
            'has_next': 'has_next',
            'has_prev': 'has_prev',
            'items': 'items'
        }

        self._page = page
        self._total_pages = total_pages
        self._total_items = total_items
        self._has_next = has_next
        self._has_prev = has_prev
        self._items = items

    @classmethod
    def from_dict(cls, dikt) -> 'BooksGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _books_get_200_response of this BooksGet200Response.  # noqa: E501
        :rtype: BooksGet200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def page(self) -> int:
        """Gets the page of this BooksGet200Response.


        :return: The page of this BooksGet200Response.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page: int):
        """Sets the page of this BooksGet200Response.


        :param page: The page of this BooksGet200Response.
        :type page: int
        """

        self._page = page

    @property
    def total_pages(self) -> int:
        """Gets the total_pages of this BooksGet200Response.


        :return: The total_pages of this BooksGet200Response.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages: int):
        """Sets the total_pages of this BooksGet200Response.


        :param total_pages: The total_pages of this BooksGet200Response.
        :type total_pages: int
        """

        self._total_pages = total_pages

    @property
    def total_items(self) -> int:
        """Gets the total_items of this BooksGet200Response.


        :return: The total_items of this BooksGet200Response.
        :rtype: int
        """
        return self._total_items

    @total_items.setter
    def total_items(self, total_items: int):
        """Sets the total_items of this BooksGet200Response.


        :param total_items: The total_items of this BooksGet200Response.
        :type total_items: int
        """

        self._total_items = total_items

    @property
    def has_next(self) -> bool:
        """Gets the has_next of this BooksGet200Response.


        :return: The has_next of this BooksGet200Response.
        :rtype: bool
        """
        return self._has_next

    @has_next.setter
    def has_next(self, has_next: bool):
        """Sets the has_next of this BooksGet200Response.


        :param has_next: The has_next of this BooksGet200Response.
        :type has_next: bool
        """

        self._has_next = has_next

    @property
    def has_prev(self) -> bool:
        """Gets the has_prev of this BooksGet200Response.


        :return: The has_prev of this BooksGet200Response.
        :rtype: bool
        """
        return self._has_prev

    @has_prev.setter
    def has_prev(self, has_prev: bool):
        """Sets the has_prev of this BooksGet200Response.


        :param has_prev: The has_prev of this BooksGet200Response.
        :type has_prev: bool
        """

        self._has_prev = has_prev

    @property
    def items(self) -> List[Book]:
        """Gets the items of this BooksGet200Response.


        :return: The items of this BooksGet200Response.
        :rtype: List[Book]
        """
        return self._items

    @items.setter
    def items(self, items: List[Book]):
        """Sets the items of this BooksGet200Response.


        :param items: The items of this BooksGet200Response.
        :type items: List[Book]
        """

        self._items = items
