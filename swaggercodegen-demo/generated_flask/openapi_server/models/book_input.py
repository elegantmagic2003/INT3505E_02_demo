from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class BookInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title=None, author=None, year=None, genre=None):  # noqa: E501
        """BookInput - a model defined in OpenAPI

        :param title: The title of this BookInput.  # noqa: E501
        :type title: str
        :param author: The author of this BookInput.  # noqa: E501
        :type author: str
        :param year: The year of this BookInput.  # noqa: E501
        :type year: int
        :param genre: The genre of this BookInput.  # noqa: E501
        :type genre: str
        """
        self.openapi_types = {
            'title': str,
            'author': str,
            'year': int,
            'genre': str
        }

        self.attribute_map = {
            'title': 'title',
            'author': 'author',
            'year': 'year',
            'genre': 'genre'
        }

        self._title = title
        self._author = author
        self._year = year
        self._genre = genre

    @classmethod
    def from_dict(cls, dikt) -> 'BookInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BookInput of this BookInput.  # noqa: E501
        :rtype: BookInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self) -> str:
        """Gets the title of this BookInput.


        :return: The title of this BookInput.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this BookInput.


        :param title: The title of this BookInput.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def author(self) -> str:
        """Gets the author of this BookInput.


        :return: The author of this BookInput.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author: str):
        """Sets the author of this BookInput.


        :param author: The author of this BookInput.
        :type author: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def year(self) -> int:
        """Gets the year of this BookInput.


        :return: The year of this BookInput.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year: int):
        """Sets the year of this BookInput.


        :param year: The year of this BookInput.
        :type year: int
        """

        self._year = year

    @property
    def genre(self) -> str:
        """Gets the genre of this BookInput.


        :return: The genre of this BookInput.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre: str):
        """Sets the genre of this BookInput.


        :param genre: The genre of this BookInput.
        :type genre: str
        """

        self._genre = genre
